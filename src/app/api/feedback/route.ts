import { NextRequest, NextResponse } from 'next/server';
import { createServerClient, type CookieOptions } from '@supabase/ssr';

export const runtime = 'nodejs';

export async function POST(req: NextRequest) {
  const { message, category, email, page, initiativeId, rating } =
    (await req.json()) as {
      message?: string;
      category?: 'bug'|'idea'|'question'|'other';
      email?: string;
      page?: string;
      initiativeId?: string;
      rating?: number;
    };

  if (!message || message.trim().length < 5) {
    return NextResponse.json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ' }, { status: 400 });
  }

  // –ì–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã Supabase –º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  const response = new NextResponse();

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get: (name: string) => req.cookies.get(name)?.value,
        set: (name: string, value: string, options: CookieOptions) =>
          response.cookies.set({ name, value, ...options }),
        remove: (name: string, options: CookieOptions) =>
          response.cookies.set({ name, value: '', ...options }),
      },
    }
  );

  // –ü—ã—Ç–∞–µ–º—Å—è —Å–≤—è–∑–∞—Ç—å –æ—Ç–∑—ã–≤ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–µ—Å–ª–∏ –æ–Ω –≤–æ—à—ë–ª)
  const { data: { user } } = await supabase.auth.getUser();

  const row = {
    author_auth_id: user?.id ?? null,
    email: email ?? null,
    page: page ?? null,
    initiative_id: initiativeId ?? null,
    category: (category ?? 'other') as 'bug'|'idea'|'question'|'other',
    message: message.trim(),
    rating: typeof rating === 'number' ? rating : null,
    meta: null as unknown as Record<string, unknown> | null,
  };

  const { error, data } = await supabase.from('feedback').insert(row).select('id').single();
  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500, headers: response.headers });
  }

  // (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –≤–µ–±—Ö—É–∫-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî Slack/Telegram/–ø–æ—á—Ç–∞
  const hook = process.env.FEEDBACK_WEBHOOK_URL;
  if (hook) {
    // –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    fetch(hook, {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({
        text: `üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤: ${row.category}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${row.message}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${row.page ?? '-'}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user?.email ?? email ?? '–≥–æ—Å—Ç—å'}`,
      }),
    }).catch(() => {});
  }

  return NextResponse.json({ ok: true, id: data.id }, { headers: response.headers });
}
